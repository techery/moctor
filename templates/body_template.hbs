#import "{{name}}.h"

{{#models}}
    @class {{name}};
{{/models}}

{{#models}}

    @implementation {{name}} {
    int __modelVersion;
    }

    + ({{name}}*)create:({{name}}BuilderBlock)builderBlock
    {
    {{name}}Builder *builder = [{{name}}Builder new];
    if(builderBlock)
    {
    builderBlock(builder);
    }
    return [[self alloc] initWithBuilder:builder modelVersion:1];
    }

    - (instancetype)init
    {
    {{name}}Builder *builder = [{{name}}Builder new];
    return [[[self class] alloc] initWithBuilder:builder modelVersion:1];
    }

    - (instancetype)initWithBuilder:({{name}}Builder*)builder modelVersion:(int)modelVersion
    {
    self = [super init];

    if (self) {
    __modelVersion = modelVersion;
    {{#props}}
        _{{name}} = builder.{{name}};
    {{/props}}
    }

    return self;
    }

    - ({{name}}*)mutate:({{name}}BuilderBlock)builderBlock
    {
    {{name}}Builder *builder = [{{name}}Builder new];

    {{#props}}
        builder.{{name}} = self.{{name}};
    {{/props}}

    builderBlock(builder);

    return [[[self class] alloc] initWithBuilder:builder modelVersion:__modelVersion + 1];
    }

    - (BOOL)isEqual:(id)other {
    if (other == self)
    return YES;
    if (!other || ![[other class] isEqual:[self class]])
    return NO;

    return [self isEqualToOther:other];
    }

    - (BOOL)isEqualToOther:({{name}} *)object {
    if (self == object)
    return YES;
    if (object == nil)
    return NO;
    {{#props}}
        if (self.{{name}} != object.{{name}})
        return NO;
    {{/props}}
    return YES;
    }

    - (NSUInteger)hash {
    NSUInteger hash = 0;
    {{#props}}
        {{#if this.type.is_ref?}}
            hash = hash * 31u + [self.{{name}} hash];
        {{else}}
            hash = hash * 31u + self.{{name}};
        {{/if}}
    {{/props}}
    return hash;
    }

    - (NSString *)description {
    NSMutableString *description = [NSMutableString stringWithFormat:@"<%@: ", NSStringFromClass([self class])];
    [description appendFormat:@"__modelVersion=%d", __modelVersion];
    {{#props}}
        {{#if this.type.is_ref?}}
            [description appendFormat:@", {{name}}=%@", self.{{name}}];
        {{else}}
            [description appendFormat:@", {{name}}=%@", @(self.{{name}})];
        {{/if}}
    {{/props}}
    [description appendString:@">"];
    return description;
    }

    - (id)initWithCoder:(NSCoder *)coder {
    self = [super init];

    if (self) {
    {{#props}}
        {{#if this.type.is_ref?}}
            _{{name}} = [coder decodeObjectForKey:@"_{{name}}"];
        {{else}}
            _{{name}} = [coder decodeIntForKey:@"_{{name}}"];
        {{/if}}
    {{/props}}
    __modelVersion = [coder decodeIntForKey:@"__modelVersion"];
    }

    return self;
    }

    - (void)encodeWithCoder:(NSCoder *)coder {
    {{#props}}
        {{#if this.type.is_ref?}}
            [coder encodeObject:self.{{name}} forKey:@"_{{name}}"];
        {{else}}
            [coder encodeInteger:self.{{name}} forKey:@"_{{name}}"];
        {{/if}}
    {{/props}}
    [coder encodeInt:__modelVersion forKey:@"__modelVersion"];
    }

    - (id)copyWithZone:(NSZone *)zone {
    {{name}} *copy = [[[self class] allocWithZone:zone] init];

    if (copy != nil) {
    copy->__modelVersion = __modelVersion + 1;
    {{#props}}
        copy->_{{name}} = _{{name}};
    {{/props}}
    }

    return copy;
    }


    @end

    @implementation {{name}}Builder

    @end

{{/models}}

{{#actors}}

    @implementation {{name}}Ref

    {{#actions}}
        {{#if this.result_type}}
            - (Promise<{{this.result_type.name}}*>*)send{{this.type.simple_name}}:({{this.type.name}}BuilderBlock)builderBlock
        {{else}}
            - (Promise *)send{{this.type.simple_name}}:({{this.type.name}}BuilderBlock)builderBlock
        {{/if}}
        {
        return [self sendAction:[{{this.type.name}} create:builderBlock]];
        }

    {{/actions}}

    @end

{{/actors}}
